name: Go and Python Build and Test

on:
  push:
    branches: ["main"]
    paths:
      - "cmd/**"
      - "pkg/**"
      - "userator/**"
      - "go.mod"
      - "go.sum"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/**"
  pull_request:
    branches: ["main"]
    paths:
      - "cmd/**"
      - "pkg/**"
      - "userator/**"
      - "go.mod"
      - "go.sum"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/**"

jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run golangci-lint on root module
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: .

      - name: Run golangci-lint on pkg module
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./pkg

  py-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f pyproject.toml ]; then pip install -e .; fi

      - name: Lint with flake8
        run: flake8 userator/

  go-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true # Caches Go modules

      # Explicit build cache - still needed
      - name: Set up Go build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            /tmp/go-build-cache
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-cache-

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Run tests on root module
        run: gotestsum --format testname -- ./...
        env:
          GOCACHE: /tmp/go-build-cache

      - name: Run tests on pkg module
        run: cd pkg && gotestsum --format testname -- ./...
        env:
          GOCACHE: /tmp/go-build-cache

  py-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f pyproject.toml ]; then pip install -e .; fi

      - name: Test with pytest
        run: pytest userator/

  go-build:
    needs: [go-lint, go-test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64]
        command: [api, ingest, writer]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Set up Go build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            /tmp/go-build-cache
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-cache-

      - name: Build executable for ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOCACHE: /tmp/go-build-cache
        run: |
          output_name="${{ matrix.command }}_executable"
          if [ "$GOOS" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          echo "Building ${{ matrix.command }} for $GOOS/$GOARCH, output: $output_name"
          go build -v -o "$output_name" ./cmd/${{ matrix.command }}

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.command }}-executable-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ${{ matrix.command }}_executable
            ${{ matrix.command }}_executable.exe
          if-no-files-found: error
